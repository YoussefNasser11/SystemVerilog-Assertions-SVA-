module assertion_liveness;
  logic A;
  logic B;
  logic C;
  logic reuse;
  logic a_clk;
  integer x,y;

  always #5 a_clk = ~ a_clk;

  default clocking my_clk @(posedge a_clk);
  endclocking

  initial begin
    $dumpfile("waveform.vcd");
    $dumpvars;
  end

  initial begin
    a_clk  = 0;
    A  = 0;
    B  = 0;
    C  = 0;
    #10;
    A = 1;
    #10;
    reuse = 1;
//     B = 1;
    A = 0;
    #10;
    reuse = 0;
//     B = 0;
    C = 0;
    #10;
    C = 0;
    #600;
    $finish;
  end

  
  sequence up_x_down_y(reuse,x=1,y);
   ##x reuse ##y !reuse;
  endsequence
  
//   property AA;
//     B -> up_x_down_y(A,4,2);
//   endproperty
  
  
  property AA (reuse,x=1,y);
    B |-> up_x_down_y(A,4,2);
  endproperty
  
 // C1: cover  property ( up_x_down_y(A,4,2));
  A1: assert property (AA(A,4,2));

    
    property main (int x, property y,z);
     ##x y |=> z;
    endproperty
    
endmodule
                   
                   /*
Sequence Resue!

sequence up_x_down_y(reuse,x=1,y);
    reuse[*x] ##y !reuse;
  endsequence

A1: assert property (reuse |=> up_x_down_y(A,,2)); //success



sequence up_x_down_y(reuse,x,y);
    reuse[*x] ##y !reuse;
  endsequence

A1: assert property (reuse |=> up_x_down_y(A,,2)); //fails
*/


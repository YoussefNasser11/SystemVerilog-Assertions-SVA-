module sequence_operators;

  bit a_clk;
  bit B,C,D,E;

  initial repeat(50) #5 a_clk = ~ a_clk;

  default clocking my_clk @(posedge a_clk);
  endclocking

  initial begin
    $dumpfile("waveform.vcd");
    $dumpvars;
  end
  
  initial begin
	// WE WILL NOT control @5ns because clock start with 0 not 1
    @(negedge a_clk); {B,C,D,E}  <= 4'b0_1_0_0; // .. @ 15ns
    @(negedge a_clk); {B,C,D,E}  <= 4'b0_1_1_0; // .. @ 25ns
    @(negedge a_clk); {B,C,D,E}  <= 4'b1_0_1_0; // .. @ 35ns
    @(negedge a_clk); {B,C,D,E}  <= 4'b1_0_0_1; // .. @ 45ns
    @(negedge a_clk); {B,C,D,E}  <= 4'b0_0_0_1; // .. @ 55ns
    @(negedge a_clk); {B,C,D,E}  <= 4'b0_0_0_0; // .. @ 65ns
    
  end
  
  sequence SEQ_CD;
    C[*1:3] ##1 D;
  endsequence
  property FM_prop;
    first_match(SEQ_CD) ## 1 B |=> E;
  endproperty
  property normal_prop;
    SEQ_CD ##1 B |=> E;
  endproperty

  first_matchh : assert property(FM_prop)
    $info ("\033[32m first_match assertion passed @%0t", $time);
    else
    $error ("\033[31m first_match assertion failed @%0t", $time);
  normal : assert property(normal_prop)
    $info ("\033[32m normal assertion passed @%0t", $time);
    else
    $error ("\033[31m normal failed @%0t", $time);
endmodule
    
    /*
@15 ns       C
@25 ns     C   D
@35 ns      D B
@45 ns      B E 
@55 ns      E
 
 
Assertion love the longest path , so @15 ns it will take C C D B E not C D B E
 normal assertion passed @55
 Time: 55 ns Started: 15 ns 
 
 @25 ns it will take CDBE and passed @55
  normal assertion passed @55
  Time: 55 ns Started: 25 ns
  
  more illustration in this image 
  https://postimg.cc/BLL35dVY
  
  reference check dave answer
  https://verificationacademy.com/forums/t/first-match-operator/48298
  
*/

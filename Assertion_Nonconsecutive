module Assertion_Nonconsecutive;

  logic A,B,C;
  bit clk;

  always #5 clk = ~clk;

  /*
    For example, if we observe A ##1 B && CLR ##1 !C then the property is deemed to have passed on the cycle where CLR occurre
    */
  initial begin
    $dumpfile("waveform.vcd");
    $dumpvars;
    A = 0;
    B = 0;
    C = 0;
    #10; 
    A = 1;
    B = 1;
    #10;
    A = 0;
    B = 0;
    #30;
    B = 1;
    #10;
    B = 0;
    #60;
    C = 0;
    #10;
    C = 1;
    #10;
    C = 0;
    #100;
    $stop;
  end

  property happy_scr;
    @(posedge clk)
    A |-> B[=2] ## 0 C;
  endproperty

  Non_Cons: assert property (happy_scr)
    $display("Passed [%0t]",$time);
    else
      $display("FAIL [%0t]",$time);


    endmodule
    
    /*

Nonconsecutive means not necessarily
consecutive

  property happy_scr;
    @(posedge clk)
    A |-> B[=2] ## 7 C;
  endproperty
when A is 1'b1
and B is repeated two times(consecutivly or non-consecutivly)
starting from the same cycle of A because |-> overlapping

##7 means that , it must wait at least 7 cycles (from the second B) 
before C becomes 1'b1

so generally they are writing it ## 1 , to make it easier and don't waste simulation -timescale=1ns/1ns +vcs+flush+all

note: if C did not come yet the assertion won't completed(not fail or not sucess) , it's very weak assertion

it will fail only if 3rd B comes before c is 1'b1 "sequence broken"

so over all in the delay ## it ignore the excess repetaions.

note if 2 b not comes it will not complete same in go to

*/

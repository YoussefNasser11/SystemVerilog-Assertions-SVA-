module Assertion_go_to_operator ;

  logic A,B,C;
  bit clk;

  always #5 clk = ~clk;

  /*
    For example, if we observe A ##1 B && CLR ##1 !C then the property is deemed to have passed on the cycle where CLR occurre
    */
  initial begin
    $dumpfile("waveform.vcd");
    $dumpvars;
    A = 0;
    B = 0;
    C = 0;
    #10; 
    A = 1;
    B = 1;
    #10;
    A = 0;
    B = 0;
    #30;
    B = 1;
    C = 0;
    #20;
    B = 0;
    C = 0;
    #10;
    B = 1;
    #10;
    C = 1;
    #10;
    C = 1;
    #10;
    C = 0;
    #100;
    $stop;
  end

  property happy_scr;
    @(posedge clk)
    A |-> B[->2] ## 3 C;
  endproperty

  Non_Cons: assert property (happy_scr)
    $display("Passed [%0t]",$time);
    else
      $display("FAIL [%0t]",$time);


    endmodule
    
    /*

go to operator 
B[->2]

  property happy_scr;
    @(posedge clk)
    A |-> B[->2] ## 1 C;
  endproperty
when A is 1'b1
and B is repeated two times(consecutivly or non-consecutivly)
starting from the same cycle of A because |-> overlapping

########
#"Note"# : C must be followed by the last repeated variable
########
##1 means that , it must wait only 1 clock cycle (from the second B) 
so C becomes 1'b1

note: if C did not come yet the assertion will fail

it will fail again if 3rd B come "sequence broken" BEFORE C is 1'b1

so over all in the delay ## it ignore the excess repetaions.

*/

Design
module Sequence_DET  (input wire clk,
                 input wire rst_n,       
                 input wire SEQ_Input,   
                 output reg SEQ_Detect); 

  // interface state machine states
  
  typedef enum reg [2:0] {S0,S1,S2,S3,S4} fsm_state;
  fsm_state current_state , next_state;
  
  
  
  // state machine for interface control 
  

  always_ff @(posedge clk or negedge rst_n) begin
    if (~rst_n)
    current_state <= S0;
  else
  current_state <= next_state;
  end
  
  always_comb begin
    
  case (current_state)
  S0:
    begin
      if(SEQ_Input)
      next_state = S1;
      else
      next_state = S0;
    end
  S1:
    begin
      if(SEQ_Input)
      next_state = S1;
      else
      next_state = S2;
    end
  S2:
    begin
      if(SEQ_Input)
      next_state = S3;
      else
      next_state = S0;
    end
  S3:
    begin
      if(SEQ_Input)
      next_state = S4;
      else
      next_state = S2;
    end
  S4:
    begin
      if(SEQ_Input)
      next_state = S1;
      else
      next_state = S2;  
// If non overlap , S3 AND S4 returns to S0 if input = 0
    end
    default: begin
      $display("error state  %0t",$time);
    end
  endcase

  end
always_comb
begin
  case (current_state)
  S0:
    begin
      SEQ_Detect = 0;
    end
  S1:
    begin
      SEQ_Detect = 0;
    end
  S2:
    begin
      SEQ_Detect = 0;
    end
  S3:
    begin
      SEQ_Detect = 0;
    end
  S4:
    begin
      SEQ_Detect = 1;
    end
    default: begin
      $error("error state");
    end
  endcase
  end
  
endmodule
    
    
    /*
    
      sequence seq;
    $past(SEQ_Input,2) && $past(SEQ_Input,3) && !$past(SEQ_Input,4) && $past (SEQ_Input,5);
  endsequence
  
  property SIMPLE_SEQ;
    disable iff (!rst_n)
    (SEQ_Detect) |=> seq;
  endproperty
  
  
  */

Verification component 

module verification_comp(input  clock,
                 reset,       
                 in,   
                 Detect);
  
  // note it must be inputs!!!!!!!!!!!!!
   default clocking my_clock @(posedge clock);
  endclocking
  
  sequence seq;
    $past(in) && $past(in,2) && !$past(in,3) && $past (in,4);
  endsequence
  
  property detect_past;
    disable iff (!reset)
    (Detect) |-> seq;
  endproperty
  
  property detect;
    disable iff (!reset)
    (in ##1 !in ##1 in ##1 in) |=> Detect;
  endproperty

  c0: cover property ( in);
  c1: cover property ( in ##1 !in);
  c2: cover property ( in ##1 !in ##1 in);
  c3: cover property ( in ##1 !in ##1 in ##1 in);

 
  past_assertion: assert property (detect_past)
    $display ("\033[32m assertion passed @%0t", $time);
   else
    $display ("\033[31m assertion failed @%0t", $time);
    
  sequence_assertion: assert property (detect)
    $display ("\033[32m assertion passed @%0t", $time);
   else
    $display ("\033[31m assertion failed @%0t", $time);
    
   detect_past_cov: cover property (detect_past);
   detect_cov:  cover property (detect);

  
  
endmodule

Testbench

`include "VC.sv"

module Sequence_tb;
  //Ports
  bit  clk;
  logic  rst_n;
  logic  SEQ_Input;
  logic  SEQ_Detect;

  bit [1:0] count;

  reg[9:0] seuqence_i;
  logic in_queue[$];
  int i;

  Sequence_DET  Sequence_inst (
    .clk(clk),
    .rst_n(rst_n),
    .SEQ_Input(SEQ_Input),
    .SEQ_Detect(SEQ_Detect)
  );
  
  bind Sequence_DET:Sequence_inst verification_comp VC1(clk,rst_n,SEQ_Input,SEQ_Detect);
  // bind VC to design inst of the design 
  always #5  clk = ! clk ;



  task pop;
    //if (in_queue.size != 0)
      SEQ_Input = in_queue.pop_front;
  endtask


  initial begin
    SEQ_Input = 0;
    in_queue = {1,0,1,1,0,1,1,1,1};
    $display (in_queue);
    rst_n    = 0;
    #10;
    rst_n    = 1;
    repeat (11) begin
      @(posedge clk);
      pop();
    end
  end

  initial begin
    forever begin
      @(posedge clk);
      if(SEQ_Detect) begin
        $display("Sequence is detected");
        count++;
      end
    end
  end
  
  initial begin
     $dumpfile("waveform.vcd");
    $dumpvars;
    #300 $stop;
  end
endmodule

run do file for questa

run -all
coverage report -details

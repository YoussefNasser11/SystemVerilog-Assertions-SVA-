module assertion_liveness;
  logic A;
  logic B;
  logic C;
  logic a_clk;

  always #5 a_clk = ~ a_clk;

  default clocking my_clk @(posedge a_clk);
  endclocking

  initial begin
    $dumpfile("waveform.vcd");
    $dumpvars;
  end

  initial begin
    a_clk  = 0;
    A  = 0;
    B  = 0;
    C  = 0;
    #10;
    A = 1;
    #10;
//     B = 1;
    A = 0;
    #10;
//     B = 0;
    C = 0;
    #10;
    C = 0;
    #600;
    $finish;
  end
  property Safe_no_weak;
    A |-> (!C[*] ##0 B);
  endproperty

  property Safe_weak;
    A |-> weak(!C[*] ##0 B);
  endproperty
  
  
  property strongg;
    A |-> strong(!C[*] ##0 B);
  endproperty
  
  
  C1: cover  property (Safe_no_weak);
  A1: assert property (Safe_no_weak);
  C2: cover  property (Safe_weak);
  A2: assert property (Safe_weak);
  C3: cover  property (strongg);
  A3: assert property (strongg);
    
endmodule
    
    /*

Linear Temporal Logic (LTL) Operators


   property s_eventuallyy;
     A_Valid |=> B_Start ##0 s_eventually (C_Ack);
   endproperty


same as 

property strongg;
  a |=> strong(b ##[*] C_Ack);
 endproperty

LTL used in Property Specification Language (PSL)

=======================================================
Two sequence operators are : weak(), strong().

directives :

assert - weak by default
assume - weak by default

cover     - strong by default
restsrict - strong by default

weak causes safety  (bounded time)
strong causes liveness (unbounded time)


weak means incomplete if sim finished before sequence happens (not fail/miss) and it hit/pass if happens


strong means fail/miss if sim finished before sequence happens and it hit/pass if happens

weak and strong are usually used in formal verification
i.e design has 10 FFs so we have 2^10=1024 states
formal tools knows all possible states without simulating 

in simulation ,we use $finish (instead of $stop) to know the result of using strong/weak keywords.

in VCS , using strong or weak -sv=2009 and the user guide states that , it has limitations that in all cases assertions and covers evaluate as incomplete , the user then defines who passed and failed 

*/
*/
